
%code requires {
  #include "Attribut.h"
  #include "Table_des_symboles.h"
  // header included in y.tab.h

}

%{
#include <stdio.h>
#include <string.h>
#define true 1
#define false 0


extern int yylex();
extern int yyparse();

void yyerror (char* s) {
   printf("\n%s!\n",s);
 }

%}

%union { 
  symb_value_type val;
  //int val;
  //double real;
  //boolean b;
  char * sid;
}



%token <val> NUM 
%token <val> FLOAT 

%token  <sid> ID 
%token  <sid> STRING

%token PV LPAR RPAR LBR RBR LET IN VIR

%token IF THEN ELSE

%token ISLT ISGT ISLEQ ISGEQ ISEQ
%left ISEQ
%left ISLT ISGT ISLEQ ISGEQ


%token AND OR NOT 
%token <val> BOOL
%left OR
%left AND



%token PLUS MOINS MULT DIV EQ
%left PLUS
left MULT
%left CONCAT
%nonassoc UNA    /* pseudo token pour assurer une priorite locale */

 //%type <val> inst
 //%type <val> aff
%type <val> exp
%type <val> aff_id
 //%type <val> aff_fun
 //%type <val> fun_head
%type <val> arith_exp
%type <sid> id_list
%type <val> atom_exp
 %type <val> control_exp
 %type <val> let_exp
 %type <sid>  funcall_exp

%type <val> list_exp
%type <val> exp_list
%type <val> bool

%type <val> atom_list
%start prog



%%

prog : inst PV    /*{printf("yacc : prog-->inst PV \n");}*/
| prog inst PV
;


inst : aff
| exp /*{/*printf("yacc : inst-->exp\n");printf("le resultat est %d\n",$$);*/
;

aff : aff_id /*{ printf("yacc : aff->aff_id \n");}*/ 
| aff_fun
;

aff_id : ID EQ exp { /*printf("yacc : aff_id->ID EQ exp \n");*/ID;set_symbol_value($1,$3);if($3.type == Int){
     printf("%s de type <int> vaut %d\n",$1,$3.value.vali);}
   else if( $3.type == Float){
     printf("%s de type <float> vaut %f\n",$1,$3.value.valf);
   };}

 
;

aff_fun : fun_head EQ exp
;

fun_head : ID id_list
;

id_list : ID 
| id_list ID
;


exp : arith_exp /*{printf("yacc : exp->arith_exp \n");}*/
| atom_exp /*printf("yacc : exp->atom_exp \n");*}*/
| control_exp 
| let_exp  
| LPAR funcall_exp RPAR {/*$$=$2;*/}
;

arith_exp : MOINS exp %prec UNA
| exp PLUS exp {/*printf("yacc : arith_exp -> exp + exp\n");*/$$=plus_svt($1,$3);
printf("le resultat %d\n",$$);}
| exp MULT exp  {/*$$=mult_svt($1,$3);*/}
| exp CONCAT exp
;

atom_exp : NUM {/*printf("yacc : atom_exp->NUM \n")*/;NUM;$$=$1;/*printf("%d\n",$$);*/};
| FLOAT {$$=$1;}
| STRING /*{ $$ = get_symbol_value($1); }*/
| ID { $$= get_symbol_value($1);/*printf("hahah");*/}
| list_exp
| LPAR exp RPAR {$$=$2;}
;

control_exp : IF bool THEN atom_exp ELSE atom_exp {
        if ($2.value.vali == true) {
             $$=$4;
         }
         else {
             $$=$6;
         };
	printf("%d if \n",$$);
 }
;

let_exp : LET aff IN atom_exp
;

funcall_exp : ID atom_list
;

atom_list : atom_exp {$$=$1;}
| atom_list atom_exp
;


list_exp : LBR exp_list RBR {$$=$2;}
;

exp_list : exp {$$=$1;}
| exp_list VIR exp
;

bool : BOOL {$$=$1;}
| bool OR bool
| bool AND bool
| NOT bool %prec UNA
  /*| exp comp exp /*{ if ($2 == ISEQ) {
     $$=true
}
   else 
     $$=false
     }*/
|exp ISLT exp
|exp ISGT exp
|exp ISLEQ exp
|exp ISGEQ exp
|exp ISEQ exp {$$ = iseq($1,$3);}
| LPAR bool RPAR {$$=$2;}
;


comp :  ISLT | ISGT | ISLEQ | ISGEQ | ISEQ
;

%%
int main () {
  printf ("? ");
  return yyparse ();
}
