%option noyywrap
/* avoid dependency with library fl */

%{
#include "y.tab.h"
#include "Attribut.h"
#include <string.h>
#include "Table_des_symboles.h"
#include <stdio.h>

%}

whitespace          [ \t\r\n\f]+

digit               [0-9]
alpha               [a-zA-Z]
alphanum            [a-zA-Z0-9]

integer             [[:digit:]]+
float               [[:digit:]]+\.[[:digit:]]*
boolean             "true"|"false"

escape              \\([\\"'ntbr ])
string              \"({escape}|[^"\\])*\"

identifier          [[:alpha:]][[:alnum:]_]*

%%
"++"         { return CONCAT;}
"+"          { return PLUS;}
"-"          { return MOINS;}
"*"          { return MULT;}
"/"          { return DIV;}
"="          { return EQ;}
"<"          { return ISLT;}
">"          { return ISGT;}
"<="         { return ISLEQ;}
">="         { return ISGEQ;}
"=="         { return ISEQ;}

"let"        { return LET;}
"in"         { return IN;}
"if"         { return IF;}
"then"       { return THEN;}
"else"       { return ELSE;}



"("          { return LPAR;}
")"          { return RPAR;}
"["          { return LBR;}
"]"          { return RBR;}
","          { return VIR;}
";"          { return PV;}



{boolean}  {yylval.val.type = Bool;
	    yylval.val.value.valb = strdup(yytext);
            return BOOL; }
{float}    {yylval.val.type = Float;
           yylval.val.value.valf = atof(yytext);
	   yylval.val.reg = 0;
           return FLOAT; }
{integer}  {yylval.val.type = Int;
           yylval.val.value.vali = atoi (yytext);
           return NUM;}
{identifier} {yylval.sid = string_to_sid(yytext);
              return ID;}
{string}     {
              yylval.val.type = String;
              yylval.val.value.vals = strdup(yytext);
	      return STRING ;}
{whitespace} ;
